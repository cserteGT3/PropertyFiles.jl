var documenterSearchIndex = {"docs":
[{"location":"lib/interface/#Interface-1","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"lib/interface/#Setting-and-getting-properties-1","page":"Interface","title":"Setting and getting properties","text":"","category":"section"},{"location":"lib/interface/#","page":"Interface","title":"Interface","text":"Properties\nsetprop\ngetprop\ngetprop!","category":"page"},{"location":"lib/interface/#PropertyFiles.Properties","page":"Interface","title":"PropertyFiles.Properties","text":"Properties()\n\nConstructor for the Properties type.\n\n\n\n\n\n","category":"type"},{"location":"lib/interface/#PropertyFiles.setprop","page":"Interface","title":"PropertyFiles.setprop","text":"setprop(prop::Properties, key::String, value::String)\n\nPuts a property into the property-dictionary. Only String keys and values can be used.\n\n\n\n\n\nsetprop(prop::Properties, key::String, value)\n\nPuts a property into the property-dictionary. The string() constructor is used to convert non-string values to string. The property-dictionary is not returned.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#PropertyFiles.getprop","page":"Interface","title":"PropertyFiles.getprop","text":"getprop(prop::Properties, key::String, default::Union{String,Nothing}=nothing)\n\nReturn the value stored for the given key or the given default value, if there's no such key. If the key does not exists and no default value is given, nothing will be returned.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#PropertyFiles.getprop!","page":"Interface","title":"PropertyFiles.getprop!","text":"getprop!(prop::Properties, key::String, default::String)\n\nReturn the value stored for the given key. If there's no such key, add the key=>default pair to the property-dictionary. See Base.get!.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Storing-and-loading-files-1","page":"Interface","title":"Storing and loading files","text":"","category":"section"},{"location":"lib/interface/#","page":"Interface","title":"Interface","text":"store\nload","category":"page"},{"location":"lib/interface/#PropertyFiles.store","page":"Interface","title":"PropertyFiles.store","text":"store(prop::Properties, filename, comment::Union{String,Nothing})\n\nStore the property-dictionary in a text file called filename. Additional comment can be added, that will be written to the beginning of the file.\n\n\n\n\n\nstore(prop::Properties, filename)\n\nStore the property-dictionary in a text file called filename.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#PropertyFiles.load","page":"Interface","title":"PropertyFiles.load","text":"load(filename)\n\nLoad filename propertyfile into a property-dictionary.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Overloads-from-Base-1","page":"Interface","title":"Overloads from Base","text":"","category":"section"},{"location":"lib/interface/#","page":"Interface","title":"Interface","text":"There are a couple of functions that are overloaded for the Properties type. Their documentation can be found here.","category":"page"},{"location":"lib/interface/#","page":"Interface","title":"Interface","text":"haskey\ndelete!\nkeys\nvalues\npairs\nsizehint!\nkeytype\nvaltype","category":"page"},{"location":"lib/interface/#Base.haskey","page":"Interface","title":"Base.haskey","text":"haskey(prop::Properties, key::String)\n\nCheck if the property-dictionary has the given key. See Base.haskey.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.delete!","page":"Interface","title":"Base.delete!","text":"delete!(prop::Properties, key::String)\n\nDelete the pair identified by the given key. See Base.delete!.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.keys","page":"Interface","title":"Base.keys","text":"keys(prop::Properties)\n\nReturn all keys stored in the property-dictionary. See Base.keys.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.values","page":"Interface","title":"Base.values","text":"values(prop::Properties)\n\nReturn all values stored in the property-dictionary. See Base.values.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.pairs","page":"Interface","title":"Base.pairs","text":"pairs(prop::Properties)\n\nReturn an iterator over key => value pairs. See Base.pairs.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.sizehint!","page":"Interface","title":"Base.sizehint!","text":"function sizehint!(prop::Properties, n::Integer)\n\nFrom the Base docs: \"Suggest that collection prop reserve capacity for at least n elements. This can improve performance.\"\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.keytype","page":"Interface","title":"Base.keytype","text":"keytype(prop::Properties)\n\nReturn type of prop's keys. From it's definition it is always String.\n\n\n\n\n\n","category":"function"},{"location":"lib/interface/#Base.valtype","page":"Interface","title":"Base.valtype","text":"valtype(prop::Properties)\n\nReturn type of prop's values. From it's definition it is always String.\n\n\n\n\n\n","category":"function"},{"location":"#PropertyFiles-1","page":"Home","title":"PropertyFiles","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This small package implements properties and property files inspired by Java. Replicating it's functionality the package only handles string keys and string values. Advantage is that saving the files is easy-peasy, downside that the user must parse/convert the strings into other types. The intended use covers mostly \"basic\" types like strings, integers, floats, but the package does not restrict the use of other types.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Install the package by:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.1) pkg> add https://github.com/cserteGT3/PropertyFiles.jl","category":"page"},{"location":"#Types-and-functions-1","page":"Home","title":"Types and functions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The package introduces the Properties type, which wraps a dictionary: Dict{String,String}.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using PropertyFiles\n\njulia> p = Properties()\nProperties(Dict{String,String}())","category":"page"},{"location":"#","page":"Home","title":"Home","text":"With the setprop() function you can populate the property-dictionary. Only strings can be used for keys and values, values with other types are converted (more on that later: Usage with user defined types). Note that the setprop function does not return anything, it mutates the given Properties.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> setprop(p, \"key1\", \"this is a string\")\n\njulia> setprop(p, \"key2\", 156.0)\n\njulia> setprop(p, \"key3\", 0)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can get the stored values with the getprop function.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> getprop(p, \"key1\")\n\"this is a string\"\n\njulia> getprop(p, \"key2\")\n\"156.0\"\n\njulia> getprop(p, \"key3\")\n\"0\"\n\njulia> getprop(p, \"not defined key\", \"default value\")\n\"default value\"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"As the last example shows, you can give a default value for the case the key not exists.","category":"page"},{"location":"#Storing-and-loading-files-1","page":"Home","title":"Storing and loading files","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can save and load the property-dictionary:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> store(p, \"filename.jlprop\")\n\njulia> store(p, \"filename2.jlprop\", \"comments\")\n\njulia> p1 = load(\"filename.jlprop\")\nProperties(Dict(\"key2\"=>\"156.0\",\"key3\"=>\"0\",\"key1\"=>\"this is a string\"))\n\njulia> p2 = load(\"filename2.jlprop\")\nProperties(Dict(\"key2\"=>\"156.0\",\"key3\"=>\"0\",\"key1\"=>\"this is a string\"))\n\njulia> p1.properties == p2.properties == p.properties\ntrue","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can see that the loaded data is the same, regardless of the comments.","category":"page"},{"location":"#File-format-1","page":"Home","title":"File format","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The above saved files look like:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"filename.jlprop:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"#2019-08-02T12:41:12.109\nkey2=156.0\nkey3=0\nkey1=this is a string","category":"page"},{"location":"#","page":"Home","title":"Home","text":"filename2.jlprop:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"#comments\n#2019-08-02T12:41:09.798\nkey2=156.0\nkey3=0\nkey1=this is a string","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Longer description of the file format is coming later...","category":"page"},{"location":"#","page":"Home","title":"Home","text":"warn: Java compatibility\nThe file format is not compatible with Java's file format. In theory Java should be able to parse these files, but not the other way. (This may change in the future, but that is not a priority for now.)","category":"page"},{"location":"#Usage-with-user-defined-types-1","page":"Home","title":"Usage with user defined types","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"TBD","category":"page"}]
}
